// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.HaltomRobotics;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.USBCamera;
import edu.wpi.first.wpilibj.CameraServer;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveLeft;
    public static SpeedController driveRight;
    public static SpeedController driveLeft2;
    public static SpeedController driveRight2;
    public static RobotDrive driverobotDrive;
    public static CANTalon pitchTalonL;
    public static CANTalon pitchTalonR;
    public static RobotDrive pitchPitchControl;
    public static CANTalon launcherTalonLauncherL;
    public static CANTalon launcherTalonLauncherR;
    public static DoubleSolenoid launcherPush;
    public static Compressor launcherCompressor;
    public static CANTalon armTalonL;
    public static CANTalon armTalonR;
    //public static RobotDrive armArmControl;
    public static CANTalon elevatorTalonL;
    public static CANTalon elevatorTalonR;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SendableChooser chooser;
    public static USBCamera USBcam;
    public static CameraServer cam;
    
    
    
    public static double ANGLE = 450;
    public static double SPEED = 5000;

    
    
    
    
    
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveLeft = new VictorSP(0);
        driveRight = new VictorSP(2);
        driveLeft2 = new VictorSP(1);
        driveRight2 = new VictorSP(3);
        
        driverobotDrive = new RobotDrive(driveLeft, driveLeft2, driveRight, driveRight2);
        
        driverobotDrive.setSafetyEnabled(true);
        driverobotDrive.setExpiration(0.1);
        driverobotDrive.setSensitivity(0.5);
        driverobotDrive.setMaxOutput(1.0);

        //driverobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        pitchTalonL = new CANTalon(3);
        pitchTalonR = new CANTalon(4);

        
        pitchPitchControl = new RobotDrive(pitchTalonL, pitchTalonR);
        
        pitchPitchControl.setSafetyEnabled(true);
        pitchPitchControl.setExpiration(0.1);
        pitchPitchControl.setSensitivity(0.5);
        pitchPitchControl.setMaxOutput(1.0);
/*
        launcherTalonLauncherL = new CANTalon(1);
        //LiveWindow.addActuator("Launcher", "TalonLauncherL", launcherTalonLauncherL);
        launcherTalonLauncherL.reverseOutput(true);
        
        launcherTalonLauncherR = new CANTalon(2);
        //LiveWindow.addActuator("Launcher", "TalonLauncherR", launcherTalonLauncherR);
        
        launcherPush = new DoubleSolenoid(0, 0, 7);
        //launcherPush = new Solenoid(0,7);
        //LiveWindow.addActuator("Launcher", "Push", launcherPush);
        
        launcherCompressor = new Compressor(0);
        
        
        armTalonL = new CANTalon(6);
        //LiveWindow.addActuator("Arm", "TalonL", armTalonL);
        
        armTalonR = new CANTalon(5);
        //LiveWindow.addActuator("Arm", "TalonR", armTalonR);
        
        //armArmControl = new RobotDrive(armTalonL, armTalonR);
        
        //armArmControl.setSafetyEnabled(true);
        //armArmControl.setExpiration(0.1);
        //armArmControl.setSensitivity(0.5);
        //armArmControl.setMaxOutput(1.0);
        //armTalonR.setInverted(true);

        elevatorTalonL = new CANTalon(8);
        //LiveWindow.addActuator("Elevator", "TalonL", elevatorTalonL);
        
        elevatorTalonR = new CANTalon(7);
        //LiveWindow.addActuator("Elevator", "TalonR", elevatorTalonR);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        launcherCompressor.setClosedLoopControl(true);
        try {
        	USBcam = new USBCamera("cam0");
        	cam = CameraServer.getInstance();
        	cam.startAutomaticCapture(USBcam);
        } catch (com.ni.vision.VisionException e) {
        	System.out.println("Camera not found -- exception: " + e);
        }
*/        
        pitchTalonR.setFeedbackDevice(FeedbackDevice.QuadEncoder);
        pitchTalonR.reverseSensor(false);
        pitchTalonR.configEncoderCodesPerRev(497);
        pitchTalonR.configNominalOutputVoltage(+0.0f, -0.0f);
        pitchTalonR.configPeakOutputVoltage(+12.0f, -12.0f);
        pitchTalonR.setProfile(0);
        pitchTalonR.setF(0);
        pitchTalonR.setP(1.5);
        pitchTalonR.setI(0.015);
        pitchTalonR.setD(150);
        pitchTalonR.setEncPosition(0);
        /*
        elevatorTalonR.setFeedbackDevice(FeedbackDevice.QuadEncoder);
        elevatorTalonR.reverseSensor(false);
        elevatorTalonR.configEncoderCodesPerRev(20);
        elevatorTalonR.configNominalOutputVoltage(+0.0f, -0.0f);
        elevatorTalonR.configPeakOutputVoltage(+12.0f, -12.0f);
        elevatorTalonR.setProfile(0);
        elevatorTalonR.setF(0);
        
        elevatorTalonR.setP(2);
        elevatorTalonR.setI(0);
        elevatorTalonR.setD(0);
        elevatorTalonR.setEncPosition(0);
        */
        chooser = new SendableChooser();
        
        chooser.addDefault("Rough Terrain", "rough");
        chooser.addObject("Ramparts", "ramparts");
        chooser.addObject("Moat", "moat");
        chooser.addObject("Rock Wall", "rockWall");
        chooser.addObject("Low Bar", "low");
        chooser.addObject("Cheval", "cheval");
        chooser.addObject("Portcullis", "port");
        chooser.addObject("Sally Port", "sally");
        chooser.addObject("Drawbridge", "drawbridge");
        
        SmartDashboard.putData("Defense Chooser", chooser);

        SmartDashboard.putNumber("Angle", 1650);

        
        
        
   
    }
}
