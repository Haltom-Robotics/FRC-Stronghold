// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.HaltomRobotics.subsystems;

import org.usfirst.frc6133.HaltomRobotics.Robot;
import org.usfirst.frc6133.HaltomRobotics.RobotMap;
import org.usfirst.frc6133.HaltomRobotics.commands.*;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController left = RobotMap.driveLeft;
    private final SpeedController right = RobotMap.driveRight;
    private final SpeedController left2 = RobotMap.driveLeft2;
    private final SpeedController right2 = RobotMap.driveRight2;
    private final RobotDrive robotDrive = RobotMap.driverobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ArcadeDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void takeJoystickInputs(GenericHID joystick)	{
    	robotDrive.arcadeDrive(joystick, 4, joystick, 1, true);
    	//Robot.vision.getTableValues();
    }
    
    public void stop() {
    	robotDrive.drive(0, 0);
    }
    
    public boolean rotateToAim()
    {
    	int bestGoal = Robot.vision.findBestGoal();
    	if (bestGoal == -1)
    		return false;
    	int adjust = Robot.vision.goals[bestGoal].findCenter() - 320;
    	if (Math.abs(adjust) < 10)	//10px from center is threshold.
    	{
    		left.set(0);
    		left2.set(0);
    		right.set(0);
    		right2.set(0);
    		//System.out.println("Centered");
    		return true;
    	}
    	if (adjust <= -32)
    	{
    		left.set(-.25);
    		left2.set(.25);
    		right.set(.25);
    		right2.set(-.25);
    		//System.out.println("Adjusting to the right");
    	} else if (adjust < 0)
    	{
    		left.set(-.15);
    		left2.set(.15);
    		right.set(.15);
    		right2.set(-.15);
    	}
    	else if (adjust >= 32)
    	{
    		left.set(.25);
    		left2.set(-.25);
    		right.set(-.25);
    		right2.set(.25);
    	}
    	else
    	{
    		left.set(.15);
    		left2.set(-.15);
    		right.set(-.15);
    		right2.set(.15);
    		//System.out.println("Adjusting to the left");
    	}
    	
    	return false;
    	
    }
}

