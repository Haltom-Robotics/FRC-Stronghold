// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.HaltomRobotics.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc6133.HaltomRobotics.Robot;
import org.usfirst.frc6133.HaltomRobotics.RobotMap;

/**
 *
 */
public class AdjustPitch extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	int loops = 0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AdjustPitch() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.pitch);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//NOTE: The line below is blocked out while we are debuggin Pitch.  It should be unblocked once Pitch is fixed.
    	//Robot.pitch.adjustPitch(Robot.oi.getJoystick());
    	
    	//NOTE: The remaining part of this execute function is dedicated to debuggin the Pitch
    	//You can comment out all of this once the problem has been solved.
    	Robot.pitch.adjustPitchPID(1630);
    	
    	if (++loops >= 50) {
    		loops = 0;
    		double motorOutputL = RobotMap.pitchTalonL.getOutputVoltage() / RobotMap.pitchTalonL.getBusVoltage();
    		double motorOutputR = RobotMap.pitchTalonR.getOutputVoltage() / RobotMap.pitchTalonR.getBusVoltage();
    		System.out.println("\tLpos: " + RobotMap.pitchTalonL.getEncPosition() + "\tLout: " + motorOutputL);
    		System.out.println("\tRpos: " + RobotMap.pitchTalonR.getEncPosition() + "\tRout: " + motorOutputR);
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.pitch.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
