// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.HaltomRobotics.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc6133.HaltomRobotics.Robot;
import org.usfirst.frc6133.HaltomRobotics.RobotMap;

/**
 *
 */




public class AutonomousCommand extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
	public Timer timer;
	
	public static final int 
			LOW_BAR = 1,
			PORTCULLIS = 2,
			CHEVAL_DE_FRISE = 3,
			MOAT = 4,
			RAMPARTS = 5,
			DRAWBRIDGE = 6,
			SALLY_PORT = 7,
			ROCK_WALL = 8,
			ROUGH_TERRAIN = 9;
	
	public static String DEF = "";
	//public static int DEF_2 = 0, DEF_3 = 0, DEF_4 = 0, DEF_5 = 0;
	public static boolean done_Phase_1 = false;
	public static boolean done_Phase_2 = false;
	public static boolean done_Phase_3 = false;
	public static boolean done_Defense = false;
	public static boolean done_Shot = false;
	
	public static int startSlot;
	

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.pitch);
        requires(Robot.launcher);
        timer = new Timer();
        RobotMap.pitchTalonR.setEncPosition(0);
        //For now we will assume that the defenses are set up as follows:
        /*
        if (DEF_2 == 0)
        	DEF_2 = (int)SmartDashboard.getNumber("DEF_2", LOW_BAR);
        if (DEF_3 == 0)
        	DEF_3 = (int)SmartDashboard.getNumber("DEF_3", LOW_BAR);
        if (DEF_4 == 0)
        	DEF_4 = (int)SmartDashboard.getNumber("DEF_4", LOW_BAR);
        if (DEF_5 == 0)
        	DEF_5 = (int)SmartDashboard.getNumber("DEF_5", LOW_BAR);
        */
        //startSlot = (int)SmartDashboard.getNumber("DEF", 3);		//We will pretend that we are starting in front of defense #3 and that it is the Ramparts
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	//System.out.print("GO");
    	
    	//RobotMap.driverobotDrive.drive(.4, 0);
    	//RobotMap.driveLeft.set(.4);
    	//RobotMap.driveRight.set(-.4);
    	//Robot.pitch.adjustPitchPID(1300.);
    	RobotMap.pitchTalonR.setEncPosition(0);
    }
    
    public void Ramparts()
    {

    	//TODO: Set timePhase1 to be the amount of time it takes to reach the Ramparts
    	//		and set timePhase2 to be the amount of time it takes to cross the Ramparts.
    	
    	double getTime = 15 - Timer.getMatchTime();
    	
    	double timePhase1 = .3;
    	double timePhase2 = 3.5;
    	double timePhase3 = 5.5;
    	double timePhase4 = 8.0;

    	if (getTime >= timePhase4) {
			Robot.pitch.adjustPitchPID(0);			//TODO:	Set the PID amount based on where we believe we need it to make the shot.
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
			done_Defense = true;
		} else if (getTime >= timePhase3) {
			Robot.pitch.adjustPitchPID(500);			//TODO:	Set the PID amount based on where we believe we need it to make the shot.
			RobotMap.driveLeft.set(.4);
	    	RobotMap.driveRight.set(.4);
		} else if (getTime >= timePhase2) {
			Robot.pitch.adjustPitchPID(-1500);			//TODO:	Set the PID amount based on where we believe we need it to make the shot.
			RobotMap.driveLeft.set(1);
	    	RobotMap.driveRight.set(1);
		} else if (getTime >= timePhase1)	{
			//System.out.println("Ramp Phase 2");
			RobotMap.driveLeft.set(1);
	    	RobotMap.driveRight.set(1);
    		Robot.pitch.adjustPitchPID(0);				//TODO: Set the PID amount based on the needed angle for continuing to pass the ramprts.
    	} else {
    		//System.out.println("Ramp Phase 1");
    		//Robot.pitch.adjustPitchPID(1300);
            //RobotMap.pitchTalonR.setEncPosition(0);
    		RobotMap.driveLeft.set(.2);
        	RobotMap.driveRight.set(.2);

    	}
    	
    	

    }
    
    public void LowBar()
    {
    	double getTime = 15 - Timer.getMatchTime();
    	double timePhase1 = 1.8;
    	double timePhase2 = 5;
    	double timePhase3 = 5.6;
    	double timePhase4 = 6.0;
    	if (getTime >= timePhase4) {
			Robot.pitch.adjustPitchPID(0);
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
			done_Defense = true;
		} else if (getTime >= timePhase3) {
			Robot.pitch.adjustPitchPID(0);	
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
		} else if (getTime >= timePhase2) {
			Robot.pitch.adjustPitchPID(500);	
			RobotMap.driveLeft.set(1);
	    	RobotMap.driveRight.set(-1);
		} else if (getTime >= timePhase1)	{
			RobotMap.driveLeft.set(.4);
	    	RobotMap.driveRight.set(.4);
    		Robot.pitch.adjustPitchPID(0);		
    	} else {

            //RobotMap.pitchTalonR.setEncPosition(0);
    		RobotMap.driveLeft.set(.4);
        	RobotMap.driveRight.set(.4);
    	}
    }
    
    public void Portcullis()
    {
    	double getTime = 15 - Timer.getMatchTime();
    	double timePhase1 = 1.8;
    	double timePhase2 = 3.5;
    	double timePhase3 = 5.5;
    	double timePhase4 = 6.0;
    	if (getTime >= timePhase4) {
			Robot.pitch.adjustPitchPID(0);
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
			done_Defense = true;
		} else if (getTime >= timePhase3) {
			Robot.pitch.adjustPitchPID(0);	
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
		} else if (getTime >= timePhase2) {
			Robot.pitch.adjustPitchPID(0);	
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
		} else if (getTime >= timePhase1)	{
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
    		Robot.pitch.adjustPitchPID(0);		
    	} else {

            //RobotMap.pitchTalonR.setEncPosition(0);
    		RobotMap.driveLeft.set(.4);
        	RobotMap.driveRight.set(.4);
    	}

    }
    
    public void ChevalDeFrise()
    {
    	double getTime = 15 - Timer.getMatchTime();
    	double timePhase1 = 1.8;
    	double timePhase2 = 3.5;
    	double timePhase3 = 5.5;
    	double timePhase4 = 6.0;
    	if (getTime >= timePhase4) {
			Robot.pitch.adjustPitchPID(0);
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
			done_Defense = true;
		} else if (getTime >= timePhase3) {
			Robot.pitch.adjustPitchPID(0);	
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
		} else if (getTime >= timePhase2) {
			Robot.pitch.adjustPitchPID(0);	
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
		} else if (getTime >= timePhase1)	{
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
    		Robot.pitch.adjustPitchPID(0);		
    	} else {

            //RobotMap.pitchTalonR.setEncPosition(0);
    		RobotMap.driveLeft.set(.4);
        	RobotMap.driveRight.set(.4);
    	}

    }
    
    public void Moat()
    {
    	double getTime = 15 - Timer.getMatchTime();
    	double timePhase1 = .3;
    	double timePhase2 = 3.5;
    	double timePhase3 = 5.5;
    	double timePhase4 = 7.0;
    	if (getTime >= timePhase4) {
			Robot.pitch.adjustPitchPID(0);
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
			done_Defense = true;
		} else if (getTime >= timePhase3) {
			Robot.pitch.adjustPitchPID(500);	
			RobotMap.driveLeft.set(.5);
	    	RobotMap.driveRight.set(.5);
		} else if (getTime >= timePhase2) {
			Robot.pitch.adjustPitchPID(-1500);	
			RobotMap.driveLeft.set(1);
	    	RobotMap.driveRight.set(1);
		} else if (getTime >= timePhase1)	{
			RobotMap.driveLeft.set(1);
	    	RobotMap.driveRight.set(1);
    		Robot.pitch.adjustPitchPID(0);		
    	} else {

            //RobotMap.pitchTalonR.setEncPosition(0);
    		RobotMap.driveLeft.set(.2);
        	RobotMap.driveRight.set(.2);
    	}

    }
    
    public void Drawbridge()
    {
    	double getTime = 15 - Timer.getMatchTime();
    	double timePhase1 = 1.8;
    	double timePhase2 = 3.5;
    	double timePhase3 = 5.5;
    	double timePhase4 = 6.0;
    	if (getTime >= timePhase4) {
			Robot.pitch.adjustPitchPID(0);
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
			done_Defense = true;
		} else if (getTime >= timePhase3) {
			Robot.pitch.adjustPitchPID(0);	
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
		} else if (getTime >= timePhase2) {
			Robot.pitch.adjustPitchPID(0);	
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
		} else if (getTime >= timePhase1)	{
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
    		Robot.pitch.adjustPitchPID(0);		
    	} else {

            //RobotMap.pitchTalonR.setEncPosition(0);
    		RobotMap.driveLeft.set(.4);
        	RobotMap.driveRight.set(.4);
    	}

    }
    
    public void SallyPort()
    {
    	double getTime = 15 - Timer.getMatchTime();
    	double timePhase1 = 1.8;
    	double timePhase2 = 3.5;
    	double timePhase3 = 5.5;
    	double timePhase4 = 6.0;
    	if (getTime >= timePhase4) {
			Robot.pitch.adjustPitchPID(0);
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
			done_Defense = true;
		} else if (getTime >= timePhase3) {
			Robot.pitch.adjustPitchPID(0);	
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
		} else if (getTime >= timePhase2) {
			Robot.pitch.adjustPitchPID(0);	
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
		} else if (getTime >= timePhase1)	{
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
    		Robot.pitch.adjustPitchPID(0);		
    	} else {

            //RobotMap.pitchTalonR.setEncPosition(0);
    		RobotMap.driveLeft.set(.4);
        	RobotMap.driveRight.set(.4);
    	}

    }
    
    public void RockWall()
    {
    	System.out.println("Check 1");
    	double getTime = 15 - Timer.getMatchTime();
    	double timePhase1 = .3;
    	double timePhase2 = 2.5;
    	double timePhase3 = 2.6;
    	double timePhase4 = 2.7;
    	if (getTime >= timePhase4) {
			Robot.pitch.adjustPitchPID(0);
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
			done_Defense = true;
		} else if (getTime >= timePhase3) {
			Robot.pitch.adjustPitchPID(0);	
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
		} else if (getTime >= timePhase2) {
			Robot.pitch.adjustPitchPID(0);	
			RobotMap.driveLeft.set(1);
	    	RobotMap.driveRight.set(1);
		} else if (getTime >= timePhase1)	{
			RobotMap.driveLeft.set(1);
	    	RobotMap.driveRight.set(1);
    		Robot.pitch.adjustPitchPID(0);		
    	} else {

            //RobotMap.pitchTalonR.setEncPosition(0);
    		RobotMap.driveLeft.set(.3);
        	RobotMap.driveRight.set(.3);
    	}

    }
    
    public void RoughTerrain()
    {
    	//System.out.println("RUN RAMP");
    	//TODO: Set timePhase1 to be the amount of time it takes to reach the Ramparts
    	//		and set timePhase2 to be the amount of time it takes to cross the Ramparts.
    	System.out.println("Run RoughTerrain");
    	double getTime = 15 - Timer.getMatchTime();
    	
    	
    	double timePhase1 = .3;
    	double timePhase2 = 2.5;
    	double timePhase3 = 5.5;
    	double timePhase4 = 7.0;
    	
    	if (getTime >= timePhase4) {
    		//System.out.println("Ramp Phase done");
			Robot.pitch.adjustPitchPID(0);			//TODO:	Set the PID amount based on where we believe we need it to make the shot.
			RobotMap.driveLeft.set(0);
	    	RobotMap.driveRight.set(0);
			done_Defense = true;
		} else if (getTime >= timePhase3) {
			RobotMap.driveLeft.set(.5);
	    	RobotMap.driveRight.set(.5);
		} else if (getTime >= timePhase2) {
			RobotMap.driveLeft.set(1);
	    	RobotMap.driveRight.set(1);
		} else if (getTime >= timePhase1)	{
			//System.out.println("Ramp Phase 2");
			RobotMap.driveLeft.set(1);
	    	RobotMap.driveRight.set(1);
    		Robot.pitch.adjustPitchPID(0);				//TODO: Set the PID amount based on the needed angle for continuing to pass the ramprts.
    	} else {
    		
            //RobotMap.pitchTalonR.setEncPosition(0);
    		RobotMap.driveLeft.set(.2);
        	RobotMap.driveRight.set(.2);
        	RobotMap.driveLeft2.set(-.2);
        	RobotMap.driveRight2.set(-.2);
						//TODO: Set the PID amount based on the needed angle for climbing the ramparts
    	}

    }
    /*
    public int GetStartingDefense(int startLoc) {
    	//System.out.println("Finding Location");
    	if (startLoc == 1)
    		return DEF_1;
    	else if (startLoc == 2) {
    		//System.out.println("Found Defense Slot 2");
    		//System.out.println(DEF_2);
    		return DEF_2;
    	}
    	else if (startLoc == 3) {
    		//System.out.println("Found Defense Slot 3");
    		//System.out.println(DEF_3);
    		return DEF_3;
    		
    	}
    	else if (startLoc == 4)
    		return DEF_4;
    	else
    		return DEF_5;
    }
    */
    public void ExecuteDefenseStrategy(String def)
    {
    	if (def == "")
    		LowBar();
    	else if (def == "port")
    		Portcullis();
    	else if (def == "cheval")
    		ChevalDeFrise();
    	else if (def == "moat")
    		Moat();
    	else if (def == "ramparts") {
    		Ramparts();
    		}
    	else if (def == "drawbridge")
    		Drawbridge();
    	else if (def == "sally")
    		SallyPort();
    	else if (def == "rockWall")
    		RockWall();
    	else if (def == "rough"){
    		RoughTerrain();
    		}
    	else {
    		LowBar();
    	}
    }
    
    public void ExecuteShot() {
    	done_Shot = true;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {

    	if (!done_Defense) {
    		ExecuteDefenseStrategy(DEF);
    	}
    	else if (!done_Shot){
    		Robot.vision.getTableValues();
    		ExecuteShot();
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
